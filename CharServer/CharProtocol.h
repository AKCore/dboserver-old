#ifndef _CHARPROTOCOL_H
#define _CHARPROTOCOL_H

#include "Protocol.h"

#pragma once

enum eOpcode
{
	UC_LOGIN_REQ = 2000,
	UC_CHARACTER_SERVERLIST_REQ,
	UC_CHARACTER_SERVERLIST_ONE_REQ,
	UC_CHARACTER_ADD_REQ,
	UC_CHARACTER_DEL_REQ,
	UC_CHARACTER_SELECT_REQ,
	UC_CHARACTER_EXIT_REQ,
	UC_CHARACTER_LOAD_REQ,
	UC_CHARACTER_DEL_CANCEL_REQ,
	UC_CONNECT_WAIT_CHECK_REQ,
	UC_CONNECT_WAIT_CANCEL_REQ,
	UC_CHARACTER_RENAME_REQ,

	CU_HEARTBEAT = 3000,
	CU_SERVER_FARM_INFO,
	CU_SERVER_CHANNEL_INFO,
	CU_LOGIN_RES,
	CU_CHARACTER_SERVERLIST_RES,
	CU_CHARACTER_SERVERLIST_ONE_RES,
	CU_CHARACTER_ADD_RES,
	CU_CHARACTER_DEL_RES,
	CU_CHARACTER_SELECT_RES,
	CU_CHARACTER_INFO,
	CU_CHARACTER_LOAD_RES,
	CU_CHARACTER_EXIT_RES,
	CU_CHARACTER_DEL_CANCEL_RES,
	CU_DISCONNECTED_NFY,
	CU_SERVER_FARM_INFO_REFRESHED_NFY,
	CU_SERVER_CHANNEL_INFO_REFRESHED_NFY,
	CU_CONNECT_WAIT_CHECK_RES,
	CU_CONNECT_WAIT_COUNT_NFY,
	CU_CONNECT_WAIT_CANCEL_RES,
	CU_CONNECT_WAIT_CANCEL_NFY,
	CU_CHARACTER_DEL_NFY = 3021,
	CU_CHARACTER_RENAME_RES,
};

#pragma pack(1)

// USER TO CHAR

BEGIN_PACKET(UC_LOGIN_REQ)
int accountId;
BYTE AuthKey[MAX_AUTHKEY_SIZE];
BYTE serverID;
END_PACKET()

BEGIN_PACKET(UC_CHARACTER_SERVERLIST_REQ)
END_PACKET()

BEGIN_PACKET(UC_CHARACTER_SERVERLIST_ONE_REQ)
END_PACKET()

// CHAR TO USER

BEGIN_PACKET(CU_HEARTBEAT)
END_PACKET()

BEGIN_PACKET(CU_SERVER_FARM_INFO)
GAMESERVER_INFO serverInfo;
END_PACKET()

BEGIN_PACKET(CU_SERVER_CHANNEL_INFO)
BYTE Count;
GAMECHANNEL_INFO channelInfo[MAX_CHANNEL_COUNT];
END_PACKET()

BEGIN_PACKET(CU_LOGIN_RES)
WORD ResultCode;
BYTE lastServerId;
DWORD RaceAllowedFlag;
END_PACKET()

BEGIN_PACKET(CU_CHARACTER_SERVERLIST_RES)
WORD ResultCode;
END_PACKET()

BEGIN_PACKET(CU_CHARACTER_SERVERLIST_ONE_RES)
WORD ResultCode;
END_PACKET()

/*BEGIN_PACKET(CU_CHARACTER_ADD_RES)
WORD ResultCode;
sPC_SUMMARY PcDataSummary;
END_PACKET()*/

BEGIN_PACKET(CU_CHARACTER_DEL_RES)
WORD ResultCode;
int charId;
END_PACKET()

BEGIN_PACKET(CU_CHARACTER_SELECT_RES)
WORD ResultCode;
int charId;
BYTE AuthKey[MAX_AUTHKEY_SIZE];
char GameServerIP[MAX_SRVADDR_SIZE + 1];
WORD GameServerPort;
END_PACKET()

/*BEGIN_PACKET(CU_CHARACTER_INFO)
sDELETE_WAIT_CHARACTER_INFO asDelData[NTL_MAX_COUNT_USER_CHAR_SLOT];
BYTE			byCount;
sPC_SUMMARY		sPcData[NTL_MAX_COUNT_USER_CHAR_SLOT]; // Maximum of Character is 8 (Temporary)	
END_PACKET()*/

BEGIN_PACKET(CU_CHARACTER_LOAD_RES)
WORD ResultCode;
END_PACKET()

BEGIN_PACKET(CU_CHARACTER_EXIT_RES)
WORD ResultCode;
END_PACKET()

BEGIN_PACKET(CU_CHARACTER_DEL_CANCEL_RES)
WORD ResultCode;
int charId;
END_PACKET()

BEGIN_PACKET(CU_DISCONNECTED_NFY)
WORD ResultCode;
END_PACKET()

#pragma pack()

#endif